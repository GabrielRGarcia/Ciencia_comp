# -*- coding: utf-8 -*-
"""visualizacao_info.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X2NkMgBmnThzdr3vXb1Spe9T-udeXLAp

### **Atividade - World Energy Consumption (Consumo Mundial de Energia)**

**Nome:** Gabriel Rocha Garcia

**RGM:** 31855920

###Importando Bibliotecas e dados Necessarios
Bibliotecas utilizadas na análise e visualização de dados em Python
"""

#matplotlib.pyplot: É uma biblioteca do Matplotlib, uma das bibliotecas de visualização de dados mais populares em Python. O módulo pyplot fornece uma interface semelhante ao MATLAB para a criação de gráficos. Ele é usado para criar e personalizar gráficos, como gráficos de linhas, barras, dispersão, pizza, entre outros.
import matplotlib.pyplot as plt

#numpy: É uma biblioteca fundamental para computação científica em Python. Ela fornece suporte para arrays multidimensionais, funções matemáticas de alto desempenho, operações de álgebra linear e muito mais. O numpy é frequentemente utilizado para manipulação e processamento eficiente de dados numéricos.
import numpy as np

#pandas: É uma biblioteca popular para análise de dados em Python. Ela fornece estruturas de dados de alto desempenho, como o DataFrame, que é uma estrutura tabular que permite manipular, limpar, transformar e analisar dados de maneira conveniente. O pandas também oferece várias funções para leitura e escrita de dados em diferentes formatos, como CSV, Excel, SQL, entre outros.
import pandas as pd

#re: É um módulo do Python que fornece suporte para operações com expressões regulares. O re é usado para manipulação de strings, realizando pesquisas, substituições e extrações com base em padrões definidos usando expressões regulares. No código fornecido, o re é importado, mas a importação é feita usando o from com um espaço vazio, o que significa que nenhuma funcionalidade específica do módulo está sendo usada no código atual.
from re import S

"""Importação de dataset "World_Energy_Consumption.csv"
"""

#Dataset utilizado no Gráfico 01
dados = pd.read_csv("World_Energy_Consumption.csv")
#Dataset utilizado no Gráfico 02 e 03
dados2 = pd.read_csv("World_Energy_Consumption.csv")

"""### Gráfico de Barra (01)


Este código cria um gráfico de barras para visualizar a geração de eletricidade a partir de energia nuclear ao longo dos anos. Vou explicar cada linha do código:
"""

#define o tamanho da figura em que o gráfico será plotado. Neste caso, a figura tem uma largura de 15 polegadas e uma altura de 5 polegadas.
plt.figure(figsize=(15,5))

#cria o gráfico de barras. Os valores do eixo x são obtidos da coluna 'year' do dataframe dados, e os valores do eixo y são obtidos da coluna 'nuclear_electricity' do mesmo dataframe. Cada barra representa a geração de eletricidade a partir de energia nuclear para um determinado ano
plt.bar(dados['year'],dados['nuclear_electricity']);

# define o título do gráfico como "Geração de Eletricidade a Partir de Energia Nuclear ao Longo dos Anos".
plt.title('Geração de Eletricidade a Partir de Energia Nuclear ao Longo dos Anos')

#define o rótulo do eixo y como "Geração de Eletricidade por Energia Nuclear (Terawatt-hora)". 
plt.ylabel('Geração de Eletricidade por Energia Nuclear( Terawatt-hora)')

#define o rótulo do eixo x como "Data (Ano)". Isso indica que o eixo x representa os anos em que a geração de eletricidade foi medida.
plt.xlabel('Data (Ano)')

# adiciona uma grade ao gráfico, o que facilita a leitura das barras e a interpretação dos valores.
plt.grid();

"""### Gráfico  de Setores (02)
Este código realiza algumas operações de análise e visualização de dados relacionados à distribuição de energia no Brasil ao longo dos anos. Vou explicar cada parte do código passo a passo:
"""

# A primeira linha define uma lista chamada energias que contém os tipos de energia considerados: carvão, óleo, gás, hidroelétrica, nuclear, eólica e solar.
energias=['coal_electricity','oil_electricity','gas_electricity','hydro_electricity','nuclear_electricity','wind_electricity','solar_electricity']

#A próxima linha adiciona uma nova coluna chamada 'total' ao dataframe dados2, que é a soma das colunas correspondentes aos tipos de energia presentes na lista energias. O parâmetro axis=1 indica que a soma deve ser feita ao longo das colunas.
dados2['total']=dados2[energias].sum(axis=1)

#Em seguida, é criado um novo dataframe chamado dados2_Electricity, que contém apenas as colunas 'year' (ano) e 'country' (país) do dataframe dados2.
dados2_Electricity=dados2[['year','country']]

#Um loop é iniciado para cada tipo de energia em energias. Para cada iteração do loop, é adicionada uma nova coluna ao dataframe dados2_Electricity com o nome do tipo de energia, e o valor de cada célula é calculado como a porcentagem correspondente daquele tipo de energia em relação à coluna 'total'. A função round é usada para arredondar os valores para 4 casas decimais.
for i in energias:
    dados2_Electricity[f"{i}"]=round(100*(dados2[i]/dados2['total']),4)

#Após o loop, o código plota um gráfico com duas subtramas usando a biblioteca matplotlib. A figura resultante tem uma largura de 15 polegadas e altura de 5 polegadas, e é dividida em duas subtramas na horizontal, com uma proporção de largura de 4 para 1.
fig, ax = plt.subplots(1, 2, figsize=(15,5),gridspec_kw={'width_ratios':[4,1]})

#O dataframe dados2_Electricity é filtrado para incluir apenas as linhas em que o país é igual a 'Brazil', e em seguida é feito um agrupamento por ano, calculando a média das colunas para cada ano.
chart_dados2=dados2_Electricity[dados2_Electricity['country']=='Brazil'].groupby('year').mean()

#O gráfico é plotado na primeira subtrama (ax[0]) usando o método plot. Cada linha no gráfico representa uma coluna do dataframe chart_dados2 (correspondendo aos tipos de energia). A legenda é adicionada automaticamente com base nos nomes das colunas.
ax[0].plot(chart_dados2,label=chart_dados2.columns)

#O título da primeira subtrama é definido como "Distribuição de Energia no Brasil (%)".
ax[0].set_title(" Distribuição de Energia no Brasil (%)")

#A legenda é exibida usando o método legend().
ax[0].legend()

#A segunda subtrama (ax[1]) é desativada com o comando ax[1].axis('off'), o que significa que não será mostrada nenhuma informação nessa subtrama.
ax[1].axis('off')

#Finalmente, o gráfico é exibido na tela usando o método plt.show().
plt.show();

"""### Gráfico de Setores (03)
Este código cria um gráfico de pizza (ou gráfico de setores) para visualizar a distribuição de energia em dois anos específicos (1990 e 2020). Vou explicar o código passo a passo:
"""

#A primeira linha define uma lista chamada years que contém os anos de interesse: 1990 e 2020.
years=[1990,2020]

#A variável count é inicializada com o valor 0. Essa variável será usada para controlar a posição das subtramas no gráfico final.
count=0

#A função plt.subplots é chamada para criar uma figura com duas subtramas na mesma linha. A figura resultante tem uma largura de 15 polegadas e altura de 4 polegadas. Os objetos fig2 e ay são retornados e representam a figura e as subtramas, respectivamente.
fig2,ay =  plt.subplots(1, 2, figsize=(18, 7))

#Um loop é iniciado para cada ano em years. Para cada iteração do loop, o código executa as seguintes etapas:
for y in years:
    #a. O dataframe chart_dados2 é filtrado para incluir apenas as linhas em que o índice (ano) é igual ao ano atual da iteração (y).
    chart_dados2_pie_1=chart_dados2[(chart_dados2.index.values==y)]
    #b. Outro loop é iniciado para cada coluna em chart_dados2_pie_1.columns.
    for i in chart_dados2_pie_1.columns:
        #c. Para cada coluna, é verificado se o valor da primeira linha (índice 0) e coluna atual é menor que 1. Se for menor, isso indica que a porcentagem correspondente dessa energia é inferior a 1% e não será incluída no gráfico de pizza.
        if chart_dados2_pie_1.iloc[0][i]<1:
            #d. Se a condição for verdadeira, a coluna é removida do dataframe chart_dados2_pie_1 usando o método drop.
            chart_dados2_pie_1.drop(columns=[i],axis=1,inplace=True)
    #e. O gráfico de pizza é plotado na subtrama atual (ay[count]). Os valores para o gráfico de pizza são obtidos da primeira linha (índice 0) do dataframe chart_dados2_pie_1. Os rótulos das fatias do gráfico são definidos como as colunas do dataframe chart_dados2_pie_1. E formata para exibir a porcentagem de cada energia, definindo seu tamanho.
    ay[count].pie(chart_dados2_pie_1.iloc[0].values,labels=chart_dados2_pie_1.columns, autopct='%1.1f%%',textprops={'fontsize': 10})
    #f. O título da subtrama é definido como o ano atual da iteração (y) seguido de "Distribuição de Energia".
    ay[count].set_title(f"{int(y)} Distribuição de Energia ")
    #g. A variável count é incrementada em 1 para avançar para a próxima subtrama.
    count=count+1
    
#Após o loop, o gráfico final é exibido na tela usando o método plt.show().
plt.show();